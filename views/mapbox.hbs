<html>
    <head>
        <title>{{title}}</title>
        <link href='https://api.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.css' rel='stylesheet' />
        <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.49.0/mapbox-gl.js'></script>
        <meta charset='utf-8' />
        <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
    <!--Import Google Icon Font-->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <!--Import materialize.css-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">
<nav>
    <!-- navbar content here  -->
    <div class="nav-wrapper">
        <a href="#" class="image">
            <img src="/images/logo.png" style="width:150px;height:60px">
        </a>
    </div>
</nav>

<ul id="slide-out" class="sidenav">
    <li>
        <div class="user-view">

            <a href="#name">
                <span class="white-text name">John Doe</span>
            </a>
            <a href="#email">
                <span class="white-text email">jdandturk@gmail.com</span>
            </a>
        </div>
    </li>
    <li>
        <a href="#!">My Profile</a>
    </li>
    <li>
        <a href="#!">Helplines</a>
    </li>
    <li>
        <a href="#!">Auction</a>
    </li>
    <li>
        <div class="divider"></div>
    </li>
    <!-- <li><a class="subheader"></a></li> -->
    <li>
        <a class="waves-effect" href="#!">Sign Out</a>
    </li>
</ul>
<a href="#" data-target="slide-out" class="sidenav-trigger">
    <i class="material-icons">menu</i>
</a>

<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
    crossorigin="anonymous"></script>
<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function () {
        var elems = document.querySelectorAll('.sidenav');
        var instances = M.Sidenav.init(elems);
    });
</script>
        <style>
            body {
                margin: 0;
                padding: 0;
            }
        
            #map {
                z-index: 10;
                position: absolute;
                top: 10%;
                bottom: 0;
                width: 100%;
            }
        </style>


    </head>
    <body>

        <div id='map'></div>


    <script>


        var decodedJson = decodeURIComponent("{{{encoded}}}");
        //var jsonObj = JSON.parse(decodedJson);
        //console.log(decodedJson);  
          
        mapboxgl.accessToken = 'pk.eyJ1IjoiZmVyaWRhdGkiLCJhIjoiY2ptbG14MTM3MDk3cDNrcGJuaHpxZTZkaCJ9.lpmarhUWUsyIxyxm6Q9C1g';
        var map = new mapboxgl.Map({
            container: 'map', // container id
            style: 'mapbox://styles/mapbox/streets-v9', // stylesheet location
            center:  [77.3839, 27.0616], // starting position [lng, lat]
            zoom:  5// starting zoom
        });

    var popup = new mapboxgl.Popup({
        closeButton: false,
        closeOnClick: false
    });

    map.on('load', function () {

        //var point_features = [];

        

        // Add a new source from our GeoJSON data and set the
        // 'cluster' option to true. GL-JS will add the point_count property to your source data.
        map.addSource("earthquakes", {
            type: "geojson",
            // Point to GeoJSON data. This example visualizes all M1.0+ earthquakes
            // from 12/22/15 to 1/21/16 as logged by USGS' Earthquake hazards program.
            data: 'http://localhost:3000/mapbox/geojson',
            cluster: true,
            clusterMaxZoom: 14, // Max zoom to cluster points on
            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
            
        });

        map.addLayer({
            id: "clusters",
            type: "circle",
            source: "earthquakes",
            filter: ["has", "point_count"],
            paint: {
                // Use step expressions (https://www.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
                // with three steps to implement three types of circles:
                //   * Blue, 20px circles when point count is less than 100
                //   * Yellow, 30px circles when point count is between 100 and 750
                //   * Pink, 40px circles when point count is greater than or equal to 750
                "circle-color": [
                    "step",
                    ["get", "point_count"],
                    "#51bbd6",
                    100,
                    "#f1f075",
                    750,
                    "#f28cb1"
                ],
                "circle-radius": [
                    "step",
                    ["get", "point_count"],
                    20,
                    100,
                    30,
                    750,
                    40
                ]
            }
        });

        map.addLayer({
            id: "cluster-count",
            type: "symbol",
            source: "earthquakes",
            filter: ["has", "point_count"],
            layout: {
                "text-field": "{point_count}",
                "text-font": ["DIN Offc Pro Medium", "Arial Unicode MS Bold"],
                "text-size": 12
            }
        });
        
        map.addLayer({
            id: "unclustered-point",
            type: "circle",
            source: "earthquakes",
            filter: ["!", ["has", "point_count"]],
            paint: {
                "circle-color": "#11b4da",
                "circle-radius": 4,
                "circle-stroke-width": 1,
                "circle-stroke-color": "#fff"
            }
        });

        // inspect a cluster on click
        map.on('click', 'clusters', function (e) {
            console.log(e);
            var feature_points; 
            
            var features = map.queryRenderedFeatures(e.point, {layers: ['clusters']});
            var clusterId = features[0].properties.cluster_id;
            var point_count = features[0].properties.point_count;
            

            map.getSource('earthquakes').getClusterLeaves(clusterId, point_count, 0, function (err, aFeatures) {
                console.log('getClusterLeaves', aFeatures);
                feature_points = aFeatures;
            
                //console.log(features);
                map.getSource('earthquakes').getClusterExpansionZoom(clusterId, function (err, zoom) {
                    if (err)
                        return;

                    map.easeTo({
                        center: features[0].geometry.coordinates,
                        zoom: zoom
                    });
                });


            });
        });

        

        map.on('mouseenter', 'clusters', function (e) {
            map.getCanvas().style.cursor = 'pointer';
            var feature_points;

            var features = map.queryRenderedFeatures(e.point, { layers: ['clusters'] });
            var clusterId = features[0].properties.cluster_id;
            var point_count = features[0].properties.point_count;


            map.getSource('earthquakes').getClusterLeaves(clusterId, point_count, 0, function (err, aFeatures) {
                //console.log('getClusterLeaves', aFeatures);
                feature_points = aFeatures;

            
                var probsum = [];
                probsum = [0,0,0,0,0];
                var max = 0;
                var maxi = 0;
                for (var i = 0; i < feature_points.length; i++) {
                    for(var j=0;j<5;j++){
                        probsum[j] += feature_points[i].properties.problems[j];
                        if(max < probsum[j]){
                            max = probsum[j];
                            maxi = j;
                        }
                    }
                }

                var probs = ["Others", "Water", "Sanitation", "Medicine", "Food"];


                var coordinates = e.features[0].geometry.coordinates.slice();
                while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                }
                var description = "<strong>Cluster Details:</strong><p>Major Problem: " + probs[maxi] + " </p>";
                popup.setLngLat(coordinates)
                    .setHTML(description)
                    .addTo(map);
                });
        });


        map.on('mouseleave', 'clusters', function () {
            map.getCanvas().style.cursor = '';
            popup.remove();
        });
        
        map.on('mouseenter', function () {
            map.getCanvas().style.cursor = 'pointer';
        });
        map.on('mouseleave', function () {
            map.getCanvas().style.cursor = '';
        });
    });
    </script>

    </body>
</html>